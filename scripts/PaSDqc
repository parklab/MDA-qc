#!/usr/bin/env python

# PaSDqc - top level executible for PaSDqc package
#
# v 1.1.1
# rev 2017-11-29 (MS: minor bug fix)
# Notes: 

import os
import argparse
import pathlib
import pandas as pd
import numpy as np
import multiprocessing as mp
import plotly.offline as py

import PaSDqc

def extract(args):
    """ Extract coverage at uniquely mappable positions in a bam file
    """
    # Make out dir if it does not exist
    out_dir = os.path.join(args.dir, 'cov')
    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    # Get bam paths from file if necessary
    if args.file_list:
        with open(args.file_list, 'r') as f:
            args.in_file = [line.rstrip('\n') for line in f]

        f.close()

    # Search a dir for bams if necessary
    elif args.dir_in:
        pattern = "*.bam"

        if args.pattern:
            pattern = "*" + args.pattern + pattern

        p = pathlib.Path(args.dir_in)
        file_list = sorted(p.glob(pattern))
        # file_list = sorted(p.glob("*.bam"))
        args.in_file = [str(f) for f in file_list]

    chrom_list = PaSDqc.extra_tools.chroms_from_build(args.build)

    pool = mp.Pool(processes=args.n_procs)
    res = []
    for f_in in args.in_file:
        fn_args = (f_in, out_dir, chrom_list)
        kwargs = {'build': args.build, 'map_qual': args.map_qual, 'clean': args.clean}
        res.append(pool.apply_async(PaSDqc.mappable_positions.extract_coverage, args=fn_args, kwds=kwargs))

    pool.close()
    pool.join()
    [r.get() for r in res]

def PSD(args):
    """ Calculate power spectral densities from a directory of coverage files
    """
    dir_in = pathlib.Path(args.dir)
    dir_search = dir_in / 'cov'

    dir_out = dir_in / 'psd'
    if not dir_out.exists():
        dir_out.mkdir()

    pattern = "*.cov"
    if args.pattern:
        pattern = '*' + args.pattern + pattern

    f_list = sorted(dir_search.glob(pattern))
    samples = [f.name.split('.chr')[0] for f in f_list]
    samples = set(samples)
    # print(samples)

    pool = mp.Pool(processes=args.n_procs)

    res = []
    for sample in samples:
        # _build_and_save(dir_in, sample=sample)
        fname = sample + ".chroms.spec"
        fout = dir_out / fname

        # _build_and_save(dir_search, sample, args.clean, fout)
        p = pool.apply_async(_build_and_save, (dir_search, sample, args.clean, fout, args.build))
        res.append(p)
        # p.get()
        # pool.apply_async(_build_and_save, args=(dir_in), kwds={'sample': sample})

    pool.close()
    pool.join()

    [p.get() for p in res]

def _build_and_save(dir_in, sample, clean, fout, build):
    """ Wrapper to build and save SamplePSD objects
    """

    print(fout)
    psd = PaSDqc.PSDTools.SamplePSD.build_from_dir(str(dir_in), sample=sample, clean=clean)
    psd.save(str(fout))

def report(args):
    p = pathlib.Path(args.dir)
    d_psd = p / 'psd'
    file_list = sorted(d_psd.glob('*.chroms.spec'))

    d_data = p / 'data'
    if not d_data.is_dir():
        d_data.mkdir()

    # Read data
    print("Reading data from {}".format(p))
    sample_list = [f.name.split('.chroms.spec')[0] for f in file_list]
    df_list = [pd.read_table(str(f), index_col=0) for f in file_list]
    psd_list = [PaSDqc.PSDTools.SamplePSD(df, name=s) for df, s in zip(df_list, sample_list)]
    freq = psd_list[0].freq

    print("Fitting chromosome and sample curves")
    chroms = PaSDqc.extra_tools.chroms_from_build(args.build)
    [psd.fit_chrom_curves(chroms, bulk=args.bulk) for psd in psd_list]
    [psd.fit_sample_curves(bulk=args.bulk) for psd in psd_list]

    print("Calculating chromosome properties")
    [psd.calc_chrom_props(chroms) for psd in psd_list]
    df_stat = PaSDqc.extra_tools.summarize_chrom_classif_by_sample(psd_list, sample_list)
    df_chrom = PaSDqc.extra_tools.summarize_chrom_classif_by_type(df_stat)

    print("Inferring amplicon size distributions")
    [psd.calc_sample_props() for psd in psd_list]
    [psd.infer_sample_amplicon_dist() for psd in psd_list]
    df_amp = PaSDqc.extra_tools.summarize_sample_props(psd_list, sample_list)
    param_names = psd_list[0].ampl.param_names('erf')
    df_fit = pd.DataFrame(np.array([psd.sample_popts['avg'] for psd in psd_list]), columns=param_names, index=sample_list)

    # Chrom warnings
    # j_list = [psd.KL_div_by_chrom() for psd in psd_list]
    # df_chrom = PaSDqc.extra_tools.summarize_KL_div_by_chrom(j_list, sample_list)

    # Categorization
    print("Categorizing samples")
    f_cat_spec = PaSDqc.extra_tools.get_data_file(args.cat_spec)
    avg_list = [psd.avg_PSD() for psd in psd_list]
    nd = np.array(avg_list)
    # freq = np.array(df_list[0].index.tolist())
    cat_spec = pd.read_table(f_cat_spec, index_col=0)
    df_clust = PaSDqc.extra_tools.classify_samples(nd, sample_list, cat_spec)

    # Amplicon size distribution
    # amplicon_list = [PaSDqc.amplicon.AmplDist(freq, avg) for avg in nd]
    # [amp.fit_curve(bulk=args.bulk, method='erf') for amp in amplicon_list]
    # size_ranges = [amp.amplicon_range() for amp in amplicon_list]
    # pdf_list = [amp.amplicon_dist() for amp in amplicon_list]
    # df_amp = pd.DataFrame(np.array(size_ranges).astype(int), columns=['amplicon median size', 'amplicon mean size', 'amplicon lower size', 'amplicon upper size'], index=sample_list)
    # param_names = amplicon_list[0].param_names('erf')
    # df_fit = pd.DataFrame(np.array([amp.popt['erf'] for amp in amplicon_list]), columns=param_names, index=sample_list)

    # ACF
    # lags = np.array([0, 1e2, 2e2, 3e2, 4e2, 5e2, 7e2, 8e2, 1e3, 5e3, 1e4, 2e4, 3e4, 5e4, 6e4, 7e4, 8e4, 9e4, 1e5, 2e5, 3e5, 4e5, 5e5, 6e5, 1e6])
    print("Estimating sample autocovariance")
    lags = np.concatenate((np.arange(0, 1e3, 1e2), np.arange(1e3, 1e4, 1e3), np.arange(1e4, 1e5, 1e4), np.arange(1e5, 1.1e6, 1e5))) 
    nd_acf = np.array([PaSDqc.extra_tools.PSD_to_ACF(freq, avg, lags) for avg in nd]) 
    df_var = pd.DataFrame(nd_acf[:, 0], columns=['variance'], index=sample_list)

    print("Generating plots")
    # Cluster plot
    dend = PaSDqc.plotly_tools.dendrogram(nd, sample_list, args.cat_spec)
    div_dend = py.plot(dend, output_type='div')

    # PSD plot
    psd = PaSDqc.plotly_tools.PSD_plot(freq, nd, sample_list, bulk=args.bulk)
    div_psd = py.plot(psd, output_type='div')

    # Amplicon dist plot
    pdf = PaSDqc.plotly_tools.amplicon_density_plot(psd_list, sample_list)
    # pdf = PaSDqc.plotly_tools.amplicon_density_plot(amplicon_list, pdf_list, sample_list)
    # pdf = plotly_tools.amplicon_density_plot(10**amplicon_list[0].freq['dist'], pdf_list, sample_list)
    div_pdf = py.plot(pdf, output_type='div')

    # ACF plot
    acf = PaSDqc.plotly_tools.ACF_plot(lags, nd_acf, sample_list)
    div_acf = py.plot(acf, output_type='div')

    # Chrom plot
    chrom = PaSDqc.plotly_tools.chrom_KL_plot(psd_list, sample_list)
    # chrom = PaSDqc.plotly_tools.chrom_KL_plot(j_list, sample_list)
    div_chrom = py.plot(chrom, output_type='div')

    # Report generation
    df = df_var.join(df_clust).join(df_amp).join(df_chrom)
    fout_name = args.rep_name + '.html'
    fout = p / fout_name
    
    print("Writing report to {}".format(fout))
    PaSDqc.report_writer.writer(df, div_dend, div_psd, div_acf, div_chrom, div_pdf, str(fout))

    print("Saving data to {}".format(d_data))
    fout_df = d_data / (args.rep_name + '.table.txt')
    df.to_csv(str(fout_df), header=True, index=True, sep="\t")

    fout_fit = d_data / (args.rep_name + '.fit.txt')
    df_fit.to_csv(str(fout_fit), header=True, index=True, sep="\t")

    PaSDqc.report_writer.write_chrom_props(psd_list, sample_list, d_data, args.rep_name)

def QC(args):
    extract(args)
    PSD(args)
    report(args)

def parse_args():
    parser = {}
    parser['argparse'] = argparse.ArgumentParser(description='MDAqc: tools for MDA quality control checks')
    parser['subparse'] = parser['argparse'].add_subparsers()

    parser['extract'] = parser['subparse'].add_parser('extract', help='Extract depth at uniquely mappable positions from bam file(s)')
    parser['extract'].add_argument('-i', '--in_file', default=None, nargs='+', help='input bam file(s)')
    parser['extract'].add_argument('-f', '--file_list', default=None, help='file of bam paths to use instead of -i')
    parser['extract'].add_argument('-d', '--dir_in', default=None, help='dir to search for bam files (instead of -i or -f)')
    parser['extract'].add_argument('-p', '--pattern', default=None, help='pattern to match when finding samples')
    parser['extract'].add_argument('-o', '--dir', default='.', help='output directory')
    parser['extract'].add_argument('-n', '--n_procs', default=1, type=int, help='number ofres] cores to use')
    parser['extract'].add_argument('-b', '--build', default='grch37', help='genome build')
    parser['extract'].add_argument('-q', '--map_qual', default=30, help='mapping quality threshold')
    parser['extract'].add_argument('--noclean', dest='clean', action='store_false', default=True, help='Do not delete pos / cov files automatically')
    parser['extract'].set_defaults(func=extract)

    parser['PSD'] = parser['subparse'].add_parser('PSD', help='Estimate power spectral densities from coverage files')
    parser['PSD'].add_argument('-d', '--dir', default=None, help='directory in which to search for coverage files')
    parser['PSD'].add_argument('-n', '--n_procs', default=1, type=int, help='number of cores to use')
    parser['PSD'].add_argument('-p', '--pattern', default=None, help='pattern to match when finding samples')
    parser['PSD'].add_argument('--noclean', dest='clean', action='store_false', default=True, help='Do not delete pos / cov files automatically')
    parser['PSD'].add_argument('-b', '--build', default='grch37', choices=['grch37', 'hg19'], help='genome build')
    parser['PSD'].set_defaults(func=PSD)

    parser['report'] = parser['subparse'].add_parser('report', help='Generate HTML report of MDA sample quality')
    parser['report'].add_argument('-d', '--dir', required=True,  default=None, help='directory in which to search for sample PSD files')
    parser['report'].add_argument('-c', '--cat_spec', default='categorical_spectra_1x.txt', help='path to file of categorical spectra')
    parser['report'].add_argument('-o', '--rep_name', default='PaSDqc_report', help='file name for html report')
    parser['report'].set_defaults(func=report)
    parser['report'].add_argument('-u', '--bulk', default='bulk_1x.smooth3.spec', help='path to bulk spectrum')
    parser['report'].add_argument('-b', '--build', default='grch37', choices=['grch37, hg19'], help='genome build')

    parser['QC'] = parser['subparse'].add_parser('QC', help='Run all MDAqc steps, starting with BAM files and ending with an html report')
    parser['QC'].add_argument('-i', '--in_file', default=None, nargs='+', help='input bam file(s)')
    parser['QC'].add_argument('-f', '--file_list', default=None, help='file of bam paths to use instead of -i or -d')
    parser['QC'].add_argument('-d', '--dir_in', default=None, help='dir to search for bam files (instead of -i or -f)')
    parser['QC'].add_argument('-o', '--dir', default='PaSDqc/', help='output directory')
    parser['QC'].add_argument('-n', '--n_procs', default=1, type=int, help='number of cores to use')
    parser['QC'].add_argument('-b', '--build', default='grch37', choices=['grch37, hg19'], help='genome build')
    parser['QC'].add_argument('-q', '--map_qual', default=30, type=int, help='mapping quality threshold')
    parser['QC'].add_argument('-c', '--cat_spec', default='categorical_spectra_1x.txt', help='path to file of categorical spectra')
    parser['QC'].add_argument('-u', '--bulk', default='bulk_1x.smooth3.spec', help='path to bulk spectrum')
    parser['QC'].add_argument('-r', '--rep_name', default='PaSDqc_report', help='file name for html report')
    parser['QC'].add_argument('-p', '--pattern', default=None, help='pattern to match when finding samples')
    parser['QC'].add_argument('--noclean', dest='clean', action='store_false', default=True, help='Do not delete pos / cov files automatically')
    parser['QC'].set_defaults(func=QC)

    return parser['argparse'].parse_args()

if __name__ == "__main__":
    args = parse_args()
    args.func(args)
